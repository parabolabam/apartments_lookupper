from dataclasses import dataclass
from typing import Optional
import re

@dataclass
class Apartment:
    id: str
    district: str
    address: str
    rooms: int
    bedrooms: int
    area: float
    floor: str
    price: int
    features: list
    location_link: str

def parse_apartment_message(message: str) -> Optional[Apartment]:
    # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    id_match = re.search(r'^\*\*(\d{4}-\d{4})\*\*', message)
    district_match = re.search(r'#([–ê-–Ø–∞-—èA-Za-z]+)', message)
    address_match = re.search(r'(?<=\n)([^\n]+)', message)
    rooms_match = re.search(r'\*\*–ö–æ–º–Ω–∞—Ç:\*\* #(\d+)–∫', message)
    bedrooms_match = re.search(r'\*\*–°–ø–∞–ª–µ–Ω:\*\* (\d+)', message)
    area_match = re.search(r'\*\*–ü–ª–æ—â–∞–¥—å:\*\* (\d+)m¬≤', message)
    floor_match = re.search(r'\*\*–≠—Ç–∞–∂:\*\* ([\d/]+)', message)
    price_match = re.search(r'\*\*–¶–µ–Ω–∞\*\*: [~]*(\d+)\$', message)
    features_match = re.findall(r'__- ([^\n]+)', message)
    location_match = re.search(r'\üìç\[–õ–æ–∫–∞—Ü–∏—è\]\((.*?)\)', message)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not (id_match and district_match and address_match and rooms_match and bedrooms_match 
            and area_match and floor_match and price_match and location_match):
        return None  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ

    return Apartment(
        id=id_match.group(1),
        district=district_match.group(1),
        address=address_match.group(1).strip(),
        rooms=int(rooms_match.group(1)),
        bedrooms=int(bedrooms_match.group(1)),
        area=float(area_match.group(1)),
        floor=floor_match.group(1),
        price=int(price_match.group(1)),
        features=features_match,
        location_link=location_match.group(1)
    )